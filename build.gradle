plugins {
    id 'groovy' // groovy 지원
    id 'java'
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

bootJar {
    archiveFileName = 'app.jar' // jar 파일 이름 변경
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation('org.spockframework:spock-core:2.1-groovy-3.0')
    testImplementation('org.spockframework:spock-spring:2.1-groovy-3.0')

    //런타임에 클래스 기반 spock mock을 만들기 위해서 필요
    testImplementation('net.bytebuddy:byte-buddy:1.14.11')

    //handlebars

    implementation('pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.4')

    //base 62
    implementation 'io.seruco.encoding:base62:0.1.3'


    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //testcontainers
    testImplementation 'org.testcontainers:spock:1.17.1'
    testImplementation 'org.testcontainers:mariadb:1.17.1'

    //spring retry

    implementation 'org.springframework.retry:spring-retry'

    //mockWebServer
    testImplementation('com.squareup.okhttp3:okhttp:4.10.0')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.10.0')


}

tasks.named('test') {
    useJUnitPlatform()
}


// gradlew 여기서 -PKAKAO_REST_API_KEY 보고 해당 명령어 작성했을때 전체 테스트 및 빌드하여 jar ㅍ파일 생성

processTestResources {
    boolean hasProperty = project.hasProperty("KAKAO_REST_API_KEY")
    System.out.println("Kakao API Key Set: " + hasProperty)
    if (hasProperty) {
        System.out.println("Kakao API Key: " + project.property("KAKAO_REST_API_KEY"))
    }
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}

test{
    environment "KAKAO_REST_API_KEY", project.findProperty("KAKAO_REST_API_KEY") ?: "defaultKey"
}